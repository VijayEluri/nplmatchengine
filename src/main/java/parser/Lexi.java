/* The following code was generated by JFlex 1.4.3 on 23/03/10 16:53 */

/* standardize.flex */
package parser;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/03/10 16:53 from the specification file
 * <tt>C:/development/eclipse-workspaces/npl/test-berkeley/src/main/jflex/standardize.flex</tt>
 */
class Lexi {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0, 
     0, 12, 16, 10,  8, 17, 19, 25, 20,  5, 26, 23, 15,  4, 13,  9, 
    24, 28,  7,  6, 11, 18, 14,  3, 27, 21,  2,  0,  0,  0,  0,  0, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\6\3\1\5"+
    "\13\3\2\5\4\3\1\5\15\3\1\6\10\3\1\5"+
    "\15\3\1\5\24\3\1\7\1\10\4\3\1\11\4\3"+
    "\1\12\13\3\1\13\3\3\1\14\4\3\1\5\6\3"+
    "\1\5\2\3\1\15\4\3\1\6\7\3\1\16\3\3"+
    "\1\6\1\3\1\5\1\3\1\5\1\17\44\3\1\6"+
    "\12\3\1\0\6\3\1\20\7\3\1\21\6\3\1\22"+
    "\3\3\1\23\1\24\5\3\1\25\33\3\1\26\11\3"+
    "\1\0\12\3\1\27\11\3\1\30\1\3\1\31\1\32"+
    "\3\3\1\33\3\3\1\34\20\3\1\35\5\3\1\0"+
    "\1\3\1\36\1\3\1\37\12\3\1\5\4\3\1\40"+
    "\2\3\1\41\6\3\1\42\10\3\1\0\1\43\1\44"+
    "\3\3\1\45\4\3\1\46\5\3\1\47\1\50\2\3"+
    "\1\51\10\3\1\0\10\3\1\52\7\3\1\53\3\3"+
    "\1\5\4\3\1\54\2\3\1\55\3\3\2\56\1\57"+
    "\6\3\1\60\3\3\1\61\1\3\1\35\1\3\1\53"+
    "\5\3\1\6\1\62\1\63\1\35\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196\0\u01b3"+
    "\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e\0\u029b"+
    "\0\127\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366"+
    "\0\u0383\0\u03a0\0\u03bd\0\u03da\0\u03f7\0\u0414\0\u0431\0\u044e"+
    "\0\u046b\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u04fc\0\u0519\0\u0536"+
    "\0\u0553\0\u0570\0\u058d\0\u05aa\0\u05c7\0\u05e4\0\u0601\0\u061e"+
    "\0\u063b\0\u0658\0\u0675\0\u0692\0\u06af\0\u06cc\0\u06e9\0\u0706"+
    "\0\u0723\0\u0740\0\u075d\0\u077a\0\u0797\0\u07b4\0\u07d1\0\u07ee"+
    "\0\u080b\0\u0828\0\u0845\0\u0862\0\u087f\0\u089c\0\u08b9\0\u08d6"+
    "\0\u08f3\0\u0910\0\u092d\0\u02b8\0\u094a\0\u0967\0\u0984\0\u09a1"+
    "\0\127\0\127\0\u09be\0\u09db\0\u09f8\0\u0a15\0\u0a32\0\u0a4f"+
    "\0\u0a6c\0\u0a89\0\u0aa6\0\127\0\u0ac3\0\u0ae0\0\u0afd\0\u0b1a"+
    "\0\u0b37\0\u0b54\0\u0b71\0\u0b8e\0\u0bab\0\u0bc8\0\u0be5\0\127"+
    "\0\u0c02\0\u0c1f\0\u0c3c\0\127\0\u0c59\0\u0c76\0\u0c93\0\u0cb0"+
    "\0\u0ccd\0\u0cea\0\u0d07\0\u0d24\0\u0d41\0\u0d5e\0\u0d7b\0\u0d98"+
    "\0\u0db5\0\u0dd2\0\127\0\u0def\0\u0e0c\0\u0e29\0\u0e46\0\127"+
    "\0\u0e63\0\u0e80\0\u0e9d\0\u0eba\0\u0ed7\0\u0ef4\0\u05e4\0\127"+
    "\0\u0f11\0\u0f2e\0\u0f4b\0\u0f68\0\u0f85\0\u0fa2\0\u0fbf\0\u0fdc"+
    "\0\127\0\u0ff9\0\u1016\0\u1033\0\u1050\0\u106d\0\u108a\0\u10a7"+
    "\0\u10c4\0\u10e1\0\u10fe\0\u111b\0\u1138\0\u1155\0\u1172\0\u118f"+
    "\0\u11ac\0\u11c9\0\u11e6\0\u1203\0\u1220\0\u123d\0\u125a\0\u1277"+
    "\0\u1294\0\u12b1\0\u12ce\0\u12eb\0\u1308\0\u1325\0\u1342\0\u135f"+
    "\0\u137c\0\u1399\0\u13b6\0\u13d3\0\u13f0\0\u140d\0\u142a\0\u1447"+
    "\0\u1464\0\u1481\0\u149e\0\u14bb\0\u14d8\0\u14f5\0\u1512\0\u152f"+
    "\0\u154c\0\u0fa2\0\u1569\0\u1586\0\u15a3\0\u15c0\0\u15dd\0\127"+
    "\0\u15fa\0\u1617\0\u1634\0\u1651\0\u166e\0\u168b\0\u16a8\0\127"+
    "\0\u16c5\0\u16e2\0\u16ff\0\u171c\0\u1739\0\u1756\0\u1773\0\u1790"+
    "\0\u17ad\0\u17ca\0\127\0\127\0\u17e7\0\u1804\0\u1821\0\u183e"+
    "\0\u185b\0\u1878\0\u1895\0\u18b2\0\u18cf\0\u18ec\0\u1909\0\u1926"+
    "\0\u1943\0\u1960\0\u197d\0\u199a\0\u19b7\0\u19d4\0\u19f1\0\u1a0e"+
    "\0\u1a2b\0\u1a48\0\u1a65\0\u1a82\0\u1a9f\0\u1abc\0\u1ad9\0\u1af6"+
    "\0\u1b13\0\u1b30\0\u1b4d\0\u1b6a\0\u1b87\0\127\0\u1ba4\0\u1bc1"+
    "\0\u1bde\0\u1bfb\0\u1c18\0\u1c35\0\u1c52\0\u1c6f\0\u1c8c\0\u1ca9"+
    "\0\u1cc6\0\u1ce3\0\u1d00\0\u1d1d\0\u1d3a\0\u1d57\0\u1d74\0\u1d91"+
    "\0\u1dae\0\u1dcb\0\127\0\u1de8\0\u1e05\0\u1e22\0\u1e3f\0\u1e5c"+
    "\0\u1e79\0\u1e96\0\u1eb3\0\u1ed0\0\127\0\u1eed\0\127\0\127"+
    "\0\u1f0a\0\u1f27\0\u1f44\0\127\0\u1f61\0\u1f7e\0\u1f9b\0\127"+
    "\0\u1fb8\0\u1fd5\0\u1ff2\0\u200f\0\u202c\0\u2049\0\u2066\0\u2083"+
    "\0\u20a0\0\u20bd\0\u20da\0\u20f7\0\u2114\0\u2131\0\u214e\0\u216b"+
    "\0\u2188\0\u21a5\0\u21c2\0\u21df\0\u21fc\0\u2219\0\u2236\0\u2253"+
    "\0\127\0\u2270\0\127\0\u228d\0\u22aa\0\u22c7\0\u22e4\0\u2301"+
    "\0\u231e\0\u233b\0\u2358\0\u2375\0\u2392\0\u23af\0\u23cc\0\u23e9"+
    "\0\u2406\0\u2423\0\127\0\u2440\0\u245d\0\u247a\0\u2497\0\u24b4"+
    "\0\u24d1\0\u24ee\0\u250b\0\u2528\0\127\0\u2545\0\u2562\0\u257f"+
    "\0\u259c\0\u25b9\0\u25d6\0\u25f3\0\u2610\0\u262d\0\127\0\127"+
    "\0\u077a\0\u264a\0\u2667\0\127\0\u2684\0\u26a1\0\u26be\0\u26db"+
    "\0\127\0\u26f8\0\u2715\0\u2732\0\u274f\0\u276c\0\127\0\127"+
    "\0\u2789\0\u27a6\0\127\0\u27c3\0\u27e0\0\u27fd\0\u281a\0\u2837"+
    "\0\u2854\0\u2871\0\u288e\0\u28ab\0\u28c8\0\u28e5\0\u2902\0\u291f"+
    "\0\u293c\0\u2959\0\u2976\0\u2993\0\127\0\u29b0\0\u29cd\0\u29ea"+
    "\0\u2a07\0\u2a24\0\u2a41\0\u2a5e\0\127\0\u2a7b\0\u2a98\0\u2ab5"+
    "\0\35\0\u2ad2\0\u2aef\0\u2b0c\0\u2b29\0\127\0\u2b46\0\u2b63"+
    "\0\127\0\u2b80\0\u2b9d\0\u2bba\0\u2bd7\0\127\0\127\0\u2bf4"+
    "\0\u2c11\0\u2c2e\0\u2c4b\0\u2c68\0\u2c85\0\127\0\u2ca2\0\u2cbf"+
    "\0\u2cdc\0\127\0\u2cf9\0\127\0\u2d16\0\u2d33\0\u2d50\0\u2d6d"+
    "\0\u2d8a\0\u2da7\0\u2dc4\0\u2d33\0\127\0\u2de1\0\u2dfe\0\127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\4\1\2\1\4\1\25"+
    "\1\26\1\27\2\4\36\0\1\3\35\0\24\4\1\0"+
    "\6\4\2\0\1\4\1\5\22\4\1\0\6\4\2\0"+
    "\3\4\1\30\1\31\1\32\1\4\1\33\1\34\1\4"+
    "\1\35\4\4\1\36\3\4\1\31\1\0\6\4\2\0"+
    "\4\4\1\31\6\4\1\37\10\4\1\0\6\4\2\0"+
    "\2\4\1\40\1\41\3\4\1\42\1\43\1\44\5\4"+
    "\1\45\1\46\2\4\1\47\1\0\6\4\2\0\3\4"+
    "\1\50\1\4\1\31\1\4\1\51\7\4\1\52\4\4"+
    "\1\0\6\4\2\0\5\4\1\31\5\4\1\31\5\4"+
    "\1\31\2\4\1\0\6\4\2\0\3\4\1\53\1\4"+
    "\1\54\1\4\1\55\2\4\1\56\7\4\1\57\1\4"+
    "\1\0\6\4\2\0\1\4\1\60\15\4\1\61\2\4"+
    "\1\62\1\4\1\0\6\4\2\0\6\4\1\63\2\4"+
    "\1\31\1\4\1\64\1\65\1\66\2\4\1\67\3\4"+
    "\1\0\1\4\1\70\4\4\2\0\7\4\1\71\2\4"+
    "\1\31\4\4\1\72\4\4\1\0\6\4\2\0\7\4"+
    "\1\73\2\4\1\74\11\4\1\0\6\4\2\0\3\4"+
    "\1\75\5\4\1\76\1\77\4\4\1\100\4\4\1\0"+
    "\6\4\2\0\3\4\1\101\3\4\1\102\13\4\1\31"+
    "\1\0\6\4\2\0\6\4\1\103\2\4\1\104\1\4"+
    "\1\105\1\106\1\107\6\4\1\0\6\4\2\0\4\4"+
    "\1\110\6\4\1\111\10\4\1\0\6\4\2\0\3\4"+
    "\1\112\3\4\1\113\7\4\1\114\4\4\1\0\6\4"+
    "\2\0\5\4\1\115\4\4\1\116\4\4\1\117\1\120"+
    "\1\4\1\121\1\4\1\0\6\4\2\0\12\4\1\122"+
    "\11\4\1\0\6\4\2\0\7\4\1\123\14\4\1\0"+
    "\6\4\2\0\4\4\1\124\3\4\1\125\13\4\1\0"+
    "\1\125\5\4\2\0\4\4\1\31\17\4\1\0\6\4"+
    "\2\0\6\4\1\126\6\4\1\127\6\4\1\0\6\4"+
    "\2\0\22\4\1\130\1\4\1\0\6\4\2\0\5\4"+
    "\1\131\2\4\1\132\1\133\12\4\1\0\6\4\2\0"+
    "\11\4\1\134\1\135\11\4\1\0\6\4\2\0\6\4"+
    "\1\136\2\4\1\137\12\4\1\0\6\4\2\0\12\4"+
    "\1\140\11\4\1\0\6\4\2\0\5\4\1\31\5\4"+
    "\1\141\10\4\1\0\6\4\2\0\15\4\1\142\3\4"+
    "\1\143\2\4\1\0\6\4\2\0\3\4\1\144\20\4"+
    "\1\0\6\4\2\0\5\4\1\145\11\4\1\146\4\4"+
    "\1\0\6\4\2\0\10\4\1\147\13\4\1\0\6\4"+
    "\2\0\5\4\1\150\16\4\1\0\6\4\2\0\4\4"+
    "\1\151\17\4\1\0\6\4\2\0\4\4\1\152\17\4"+
    "\1\0\6\4\2\0\10\4\1\153\13\4\1\0\6\4"+
    "\2\0\14\4\1\154\7\4\1\0\6\4\2\0\5\4"+
    "\1\155\16\4\1\0\6\4\2\0\23\4\1\156\1\0"+
    "\6\4\2\0\2\4\1\157\1\4\1\160\6\4\1\161"+
    "\7\4\1\160\1\0\6\4\2\0\15\4\1\162\6\4"+
    "\1\0\6\4\2\0\17\4\1\163\4\4\1\0\6\4"+
    "\2\0\7\4\1\164\14\4\1\0\6\4\2\0\4\4"+
    "\1\165\3\4\1\166\4\4\1\167\6\4\1\0\6\4"+
    "\2\0\3\4\1\124\6\4\1\170\4\4\1\171\4\4"+
    "\1\0\6\4\2\0\14\4\1\172\7\4\1\0\6\4"+
    "\2\0\6\4\1\31\1\173\3\4\1\174\10\4\1\0"+
    "\6\4\2\0\12\4\1\175\11\4\1\0\6\4\2\0"+
    "\15\4\1\31\6\4\1\0\6\4\2\0\11\4\1\176"+
    "\12\4\1\0\6\4\2\0\24\4\1\0\1\4\1\177"+
    "\4\4\2\0\11\4\1\200\1\4\1\201\10\4\1\0"+
    "\6\4\2\0\11\4\1\202\12\4\1\0\6\4\2\0"+
    "\13\4\1\203\1\4\1\204\6\4\1\0\6\4\2\0"+
    "\13\4\1\205\10\4\1\0\6\4\2\0\2\4\1\206"+
    "\1\4\1\207\17\4\1\0\6\4\2\0\6\4\1\210"+
    "\15\4\1\0\6\4\2\0\4\4\1\211\17\4\1\0"+
    "\6\4\2\0\11\4\1\212\12\4\1\0\6\4\2\0"+
    "\7\4\1\213\14\4\1\0\6\4\2\0\7\4\1\214"+
    "\2\4\1\215\11\4\1\0\6\4\2\0\3\4\1\216"+
    "\20\4\1\0\6\4\2\0\12\4\1\217\11\4\1\0"+
    "\6\4\2\0\24\4\1\0\2\4\1\220\3\4\2\0"+
    "\12\4\1\221\11\4\1\0\6\4\2\0\17\4\1\222"+
    "\4\4\1\0\6\4\2\0\3\4\1\223\13\4\1\224"+
    "\4\4\1\0\6\4\2\0\3\4\1\225\2\4\1\31"+
    "\15\4\1\0\1\226\5\4\2\0\15\4\1\227\6\4"+
    "\1\0\6\4\2\0\5\4\1\230\16\4\1\0\6\4"+
    "\2\0\16\4\1\231\5\4\1\0\6\4\2\0\7\4"+
    "\1\232\14\4\1\0\6\4\2\0\24\4\1\0\1\4"+
    "\1\233\4\4\2\0\5\4\1\234\16\4\1\0\6\4"+
    "\2\0\16\4\1\235\5\4\1\0\6\4\2\0\23\4"+
    "\1\236\1\0\6\4\2\0\12\4\1\237\11\4\1\0"+
    "\6\4\2\0\20\4\1\240\3\4\1\0\6\4\2\0"+
    "\5\4\1\241\16\4\1\0\6\4\2\0\17\4\1\242"+
    "\4\4\1\0\6\4\2\0\17\4\1\243\4\4\1\0"+
    "\6\4\2\0\3\4\1\244\20\4\1\0\6\4\2\0"+
    "\17\4\1\245\4\4\1\0\6\4\2\0\12\4\1\246"+
    "\7\4\1\247\1\4\1\0\6\4\2\0\4\4\1\250"+
    "\17\4\1\0\6\4\2\0\17\4\1\251\1\252\3\4"+
    "\1\0\6\4\2\0\17\4\1\253\4\4\1\0\6\4"+
    "\2\0\5\4\1\170\16\4\1\0\6\4\2\0\24\4"+
    "\1\0\2\4\1\254\3\4\2\0\20\4\1\255\3\4"+
    "\1\0\6\4\2\0\11\4\1\256\12\4\1\0\6\4"+
    "\2\0\20\4\1\257\3\4\1\0\6\4\2\0\17\4"+
    "\1\260\4\4\1\0\6\4\2\0\11\4\1\261\12\4"+
    "\1\0\6\4\2\0\14\4\1\262\7\4\1\0\6\4"+
    "\2\0\11\4\1\263\12\4\1\0\6\4\2\0\11\4"+
    "\1\264\12\4\1\0\6\4\2\0\11\4\1\265\12\4"+
    "\1\0\6\4\2\0\3\4\1\266\20\4\1\0\6\4"+
    "\2\0\10\4\1\267\13\4\1\0\6\4\2\0\4\4"+
    "\1\270\17\4\1\0\6\4\2\0\2\4\1\271\21\4"+
    "\1\0\1\4\1\272\4\4\2\0\11\4\1\273\12\4"+
    "\1\0\6\4\2\0\17\4\1\274\4\4\1\0\6\4"+
    "\2\0\2\4\1\275\21\4\1\0\6\4\2\0\11\4"+
    "\1\276\12\4\1\0\6\4\2\0\22\4\1\277\1\4"+
    "\1\0\6\4\2\0\17\4\1\300\4\4\1\0\6\4"+
    "\2\0\11\4\1\31\12\4\1\0\6\4\2\0\3\4"+
    "\1\301\20\4\1\0\6\4\2\0\17\4\1\302\4\4"+
    "\1\0\6\4\2\0\13\4\1\303\4\4\1\304\3\4"+
    "\1\0\6\4\2\0\7\4\1\305\14\4\1\0\6\4"+
    "\2\0\3\4\1\306\20\4\1\0\6\4\2\0\22\4"+
    "\1\307\1\4\1\0\6\4\2\0\15\4\1\310\6\4"+
    "\1\0\6\4\2\0\17\4\1\32\4\4\1\311\1\312"+
    "\5\4\2\0\17\4\1\31\4\4\1\0\6\4\2\0"+
    "\1\4\1\313\22\4\1\0\6\4\2\0\20\4\1\314"+
    "\3\4\1\0\6\4\2\0\6\4\1\315\15\4\1\0"+
    "\6\4\2\0\3\4\1\316\20\4\1\0\6\4\2\0"+
    "\11\4\1\32\12\4\1\0\6\4\2\0\17\4\1\317"+
    "\4\4\1\0\6\4\2\0\11\4\1\320\12\4\1\0"+
    "\6\4\2\0\10\4\1\321\4\4\1\322\6\4\1\0"+
    "\6\4\2\0\24\4\1\0\1\32\5\4\2\0\5\4"+
    "\1\323\16\4\1\0\6\4\2\0\11\4\1\324\12\4"+
    "\1\0\6\4\2\0\15\4\1\325\6\4\1\0\6\4"+
    "\2\0\10\4\1\326\13\4\1\0\6\4\2\0\13\4"+
    "\1\327\10\4\1\0\6\4\2\0\4\4\1\330\1\4"+
    "\1\330\15\4\1\0\6\4\2\0\14\4\1\331\7\4"+
    "\1\0\6\4\2\0\13\4\1\332\10\4\1\0\6\4"+
    "\2\0\2\4\1\333\6\4\1\334\12\4\1\0\6\4"+
    "\2\0\11\4\1\335\5\4\1\336\4\4\1\0\6\4"+
    "\2\0\10\4\1\337\13\4\1\0\6\4\2\0\17\4"+
    "\1\340\4\4\1\0\6\4\2\0\21\4\1\341\2\4"+
    "\1\0\6\4\2\0\15\4\1\342\6\4\1\0\6\4"+
    "\2\0\4\4\1\343\17\4\1\0\6\4\2\0\4\4"+
    "\1\344\17\4\1\0\6\4\2\0\5\4\1\345\16\4"+
    "\1\0\6\4\2\0\7\4\1\346\14\4\1\0\6\4"+
    "\2\0\15\4\1\347\6\4\1\0\6\4\2\0\10\4"+
    "\1\350\13\4\1\0\6\4\2\0\13\4\1\351\10\4"+
    "\1\0\6\4\2\0\5\4\1\352\16\4\1\0\6\4"+
    "\2\0\15\4\1\353\6\4\1\0\6\4\2\0\7\4"+
    "\1\354\14\4\1\0\6\4\2\0\20\4\1\355\3\4"+
    "\1\0\6\4\2\0\24\4\1\0\4\4\1\31\1\4"+
    "\2\0\4\4\1\356\17\4\1\0\6\4\2\0\5\4"+
    "\1\357\16\4\1\0\2\4\1\360\3\4\2\0\15\4"+
    "\1\361\6\4\1\0\6\4\2\0\11\4\1\362\12\4"+
    "\1\0\6\4\2\0\1\4\1\363\22\4\1\0\6\4"+
    "\2\0\10\4\1\364\13\4\1\0\6\4\2\0\15\4"+
    "\1\365\6\4\1\0\6\4\2\0\3\4\1\366\20\4"+
    "\1\0\6\4\2\0\17\4\1\367\4\4\1\0\6\4"+
    "\2\0\17\4\1\370\4\4\1\0\6\4\2\0\5\4"+
    "\1\371\16\4\1\0\6\4\2\0\7\4\1\301\14\4"+
    "\1\0\6\4\2\0\10\4\1\372\13\4\1\0\6\4"+
    "\2\0\20\4\1\373\3\4\1\0\6\4\2\0\11\4"+
    "\1\374\12\4\1\0\6\4\2\0\17\4\1\375\4\4"+
    "\1\0\6\4\2\0\7\4\1\376\2\4\1\377\5\4"+
    "\1\u0100\3\4\1\0\6\4\2\0\5\4\1\u0101\11\4"+
    "\1\u0102\4\4\1\0\6\4\2\0\13\4\1\u0103\10\4"+
    "\1\0\6\4\2\0\3\4\1\u0104\20\4\1\0\6\4"+
    "\2\0\3\4\1\u0105\1\u0106\12\4\1\u0107\4\4\1\0"+
    "\6\4\2\0\13\4\1\u0108\10\4\1\0\6\4\2\0"+
    "\10\4\1\u0109\13\4\1\0\6\4\2\0\5\4\1\31"+
    "\16\4\1\0\6\4\2\0\5\4\1\u010a\16\4\1\0"+
    "\6\4\2\0\23\4\1\u010b\1\0\6\4\2\0\13\4"+
    "\1\u010c\10\4\1\0\6\4\2\0\20\4\1\u010d\3\4"+
    "\1\0\6\4\2\0\15\4\1\u010e\6\4\1\0\6\4"+
    "\2\0\7\4\1\340\14\4\1\0\6\4\2\0\3\4"+
    "\1\u010f\20\4\1\0\6\4\27\0\1\u0110\7\0\7\4"+
    "\1\u0111\14\4\1\0\6\4\2\0\2\4\1\201\21\4"+
    "\1\0\6\4\2\0\17\4\1\u0112\4\4\1\0\6\4"+
    "\2\0\11\4\1\u0113\12\4\1\0\6\4\2\0\5\4"+
    "\1\u0114\16\4\1\0\6\4\2\0\22\4\1\57\1\4"+
    "\1\0\6\4\2\0\7\4\1\u0115\14\4\1\0\6\4"+
    "\2\0\6\4\1\31\15\4\1\0\6\4\2\0\7\4"+
    "\1\u0116\14\4\1\0\6\4\2\0\20\4\1\u0117\3\4"+
    "\1\0\6\4\2\0\11\4\1\u0118\12\4\1\0\6\4"+
    "\2\0\24\4\1\0\2\4\1\330\3\4\2\0\17\4"+
    "\1\u0119\4\4\1\0\6\4\2\0\7\4\1\u011a\14\4"+
    "\1\0\6\4\2\0\4\4\1\u011b\17\4\1\0\6\4"+
    "\2\0\17\4\1\u011c\4\4\1\0\6\4\2\0\22\4"+
    "\1\u011d\1\4\1\0\6\4\2\0\1\4\1\u011e\22\4"+
    "\1\0\6\4\2\0\17\4\1\u011f\4\4\1\0\6\4"+
    "\2\0\5\4\1\32\16\4\1\0\6\4\2\0\7\4"+
    "\1\u0120\14\4\1\0\6\4\2\0\3\4\1\u0121\20\4"+
    "\1\0\6\4\2\0\13\4\1\u0122\10\4\1\0\6\4"+
    "\2\0\10\4\1\u0123\13\4\1\0\6\4\2\0\3\4"+
    "\1\u0124\1\u0125\17\4\1\0\6\4\2\0\20\4\1\u0126"+
    "\3\4\1\0\6\4\2\0\17\4\1\u0127\4\4\1\0"+
    "\6\4\2\0\3\4\1\u0122\20\4\1\0\6\4\2\0"+
    "\4\4\1\u0128\17\4\1\0\6\4\2\0\6\4\1\32"+
    "\15\4\1\0\6\4\2\0\5\4\1\u0129\16\4\1\0"+
    "\6\4\2\0\11\4\1\u012a\12\4\1\0\6\4\2\0"+
    "\13\4\1\u012b\10\4\1\0\6\4\2\0\17\4\1\301"+
    "\4\4\1\0\6\4\2\0\17\4\1\u012c\4\4\1\0"+
    "\6\4\2\0\3\4\1\u012d\20\4\1\0\6\4\2\0"+
    "\12\4\1\u012e\11\4\1\0\6\4\2\0\11\4\1\u012f"+
    "\12\4\1\0\6\4\2\0\4\4\1\u0130\17\4\1\0"+
    "\6\4\2\0\7\4\1\u0131\14\4\1\0\6\4\2\0"+
    "\23\4\1\31\1\0\6\4\2\0\2\4\1\32\21\4"+
    "\1\0\6\4\2\0\3\4\1\u0132\20\4\1\0\6\4"+
    "\2\0\17\4\1\u0133\4\4\1\0\6\4\2\0\3\4"+
    "\1\u0134\20\4\1\0\6\4\2\0\12\4\1\u0135\11\4"+
    "\1\0\6\4\2\0\13\4\1\u0136\10\4\1\0\6\4"+
    "\2\0\4\4\1\u0137\17\4\1\0\6\4\2\0\13\4"+
    "\1\u0138\10\4\1\0\6\4\2\0\11\4\1\u0139\12\4"+
    "\1\0\6\4\2\0\7\4\1\u013a\14\4\1\0\6\4"+
    "\2\0\13\4\1\207\10\4\1\0\6\4\2\0\6\4"+
    "\1\u013b\15\4\1\0\6\4\2\0\4\4\1\u013c\17\4"+
    "\1\0\6\4\2\0\13\4\1\u013d\10\4\1\0\6\4"+
    "\2\0\6\4\1\u0106\15\4\1\0\6\4\2\0\3\4"+
    "\1\u013e\3\4\1\u013f\14\4\1\0\6\4\2\0\7\4"+
    "\1\u0140\14\4\1\0\6\4\2\0\11\4\1\u0141\12\4"+
    "\1\0\6\4\2\0\2\4\1\u0142\21\4\1\0\6\4"+
    "\2\0\10\4\1\u0143\13\4\1\0\6\4\2\0\13\4"+
    "\1\u0144\10\4\1\0\6\4\2\0\12\4\1\u0145\11\4"+
    "\1\0\6\4\2\0\10\4\1\u0146\13\4\1\0\6\4"+
    "\15\0\1\u0147\21\0\5\4\1\u0148\16\4\1\0\6\4"+
    "\2\0\13\4\1\u0149\10\4\1\0\6\4\2\0\17\4"+
    "\1\u014a\4\4\1\0\6\4\2\0\4\4\1\u014b\17\4"+
    "\1\0\6\4\2\0\24\4\1\0\2\4\1\367\3\4"+
    "\2\0\5\4\1\u014c\16\4\1\0\6\4\2\0\12\4"+
    "\1\147\11\4\1\0\6\4\2\0\5\4\1\u014d\16\4"+
    "\1\0\6\4\2\0\5\4\1\u014e\16\4\1\0\6\4"+
    "\2\0\1\4\1\u0131\22\4\1\0\6\4\2\0\5\4"+
    "\1\u014f\16\4\1\0\6\4\2\0\10\4\1\u0150\13\4"+
    "\1\0\6\4\2\0\7\4\1\215\14\4\1\0\6\4"+
    "\2\0\4\4\1\u0151\17\4\1\0\6\4\2\0\5\4"+
    "\1\u0152\16\4\1\0\6\4\2\0\10\4\1\u0117\13\4"+
    "\1\0\6\4\2\0\12\4\1\u0153\11\4\1\0\6\4"+
    "\2\0\7\4\1\u0154\14\4\1\0\6\4\2\0\13\4"+
    "\1\u0155\10\4\1\0\6\4\2\0\15\4\1\u013b\6\4"+
    "\1\0\6\4\2\0\17\4\1\u0156\4\4\1\0\6\4"+
    "\2\0\5\4\1\u0157\16\4\1\0\6\4\2\0\17\4"+
    "\1\170\4\4\1\0\6\4\2\0\7\4\1\u0158\14\4"+
    "\1\0\6\4\2\0\5\4\1\201\16\4\1\0\6\4"+
    "\2\0\20\4\1\u0159\3\4\1\0\6\4\2\0\13\4"+
    "\1\31\10\4\1\0\6\4\2\0\16\4\1\u015a\5\4"+
    "\1\0\6\4\2\0\4\4\1\u015b\17\4\1\0\6\4"+
    "\2\0\11\4\1\u015c\12\4\1\0\6\4\2\0\15\4"+
    "\1\u015d\6\4\1\0\6\4\2\0\11\4\1\u015e\12\4"+
    "\1\0\6\4\2\0\3\4\1\u015f\20\4\1\0\6\4"+
    "\2\0\3\4\1\u0160\17\4\1\160\1\0\6\4\2\0"+
    "\17\4\1\u0161\4\4\1\0\6\4\2\0\15\4\1\u0162"+
    "\6\4\1\0\6\4\2\0\12\4\1\301\11\4\1\0"+
    "\6\4\2\0\11\4\1\u0163\12\4\1\0\6\4\2\0"+
    "\24\4\1\0\2\4\1\u0106\3\4\2\0\24\4\1\0"+
    "\5\4\1\u0164\2\0\15\4\1\u0165\6\4\1\0\6\4"+
    "\2\0\2\4\1\u0166\21\4\1\0\6\4\2\0\3\4"+
    "\1\u0167\20\4\1\0\6\4\2\0\7\4\1\u0168\14\4"+
    "\1\0\6\4\2\0\3\4\1\u0169\13\4\1\u016a\4\4"+
    "\1\0\6\4\2\0\10\4\1\u016b\13\4\1\0\6\4"+
    "\2\0\16\4\1\u016c\5\4\1\0\6\4\2\0\12\4"+
    "\1\u016d\11\4\1\0\6\4\11\0\1\u016e\25\0\24\4"+
    "\1\0\1\u016f\5\4\2\0\6\4\1\u0170\15\4\1\0"+
    "\6\4\2\0\3\4\1\u0171\20\4\1\0\6\4\2\0"+
    "\3\4\1\u0172\3\4\1\u0173\14\4\1\0\6\4\2\0"+
    "\4\4\1\u0171\17\4\1\0\6\4\2\0\4\4\1\u0174"+
    "\17\4\1\0\6\4\2\0\7\4\1\u0175\14\4\1\0"+
    "\6\4\2\0\4\4\1\u0176\17\4\1\0\6\4\2\0"+
    "\2\4\1\u0177\21\4\1\0\6\4\2\0\15\4\1\32"+
    "\6\4\1\0\6\4\2\0\2\4\1\u0178\21\4\1\0"+
    "\6\4\2\0\24\4\1\0\2\4\1\u0179\3\4\2\0"+
    "\2\4\1\u017a\1\4\1\31\17\4\1\0\6\4\2\0"+
    "\3\4\1\u017b\20\4\1\0\6\4\2\0\13\4\1\u017c"+
    "\10\4\1\0\6\4\2\0\5\4\1\u017d\16\4\1\0"+
    "\6\4\2\0\20\4\1\u017e\3\4\1\0\6\4\2\0"+
    "\4\4\1\u017f\17\4\1\0\6\4\2\0\4\4\1\u0180"+
    "\17\4\1\0\6\4\2\0\12\4\1\u0163\11\4\1\0"+
    "\6\4\2\0\11\4\1\u0181\12\4\1\0\6\4\2\0"+
    "\17\4\1\u0182\4\4\1\0\6\4\2\0\5\4\1\210"+
    "\16\4\1\0\6\4\2\0\4\4\1\u0183\10\4\1\u0184"+
    "\6\4\1\0\6\4\2\0\5\4\1\367\16\4\1\0"+
    "\6\4\2\0\20\4\1\u0185\3\4\1\0\6\4\2\0"+
    "\2\4\1\u0186\21\4\1\0\6\4\2\0\4\4\1\u0187"+
    "\17\4\1\0\6\4\2\0\20\4\1\124\3\4\1\0"+
    "\6\4\2\0\13\4\1\u0188\10\4\1\0\6\4\2\0"+
    "\2\4\1\u0189\21\4\1\0\6\4\2\0\3\4\1\u0169"+
    "\13\4\1\u018a\4\4\1\0\6\4\2\0\15\4\1\201"+
    "\6\4\1\0\6\4\2\0\11\4\1\u018b\12\4\1\0"+
    "\6\4\3\0\1\u018c\33\0\10\4\1\u018d\13\4\1\0"+
    "\6\4\2\0\13\4\1\u018e\10\4\1\0\6\4\2\0"+
    "\2\4\1\u018f\21\4\1\0\6\4\2\0\3\4\1\u0190"+
    "\13\4\1\u0191\4\4\1\0\6\4\2\0\12\4\1\u0192"+
    "\11\4\1\0\6\4\2\0\24\4\1\0\1\4\1\u0193"+
    "\4\4\2\0\17\4\1\u0102\4\4\1\0\6\4\2\0"+
    "\12\4\1\u0194\11\4\1\0\6\4\2\0\4\4\1\u0195"+
    "\17\4\1\0\6\4\2\0\17\4\1\32\4\4\1\0"+
    "\6\4\2\0\11\4\1\u0196\12\4\1\0\6\4\2\0"+
    "\3\4\1\u0197\20\4\1\0\6\4\2\0\4\4\1\160"+
    "\17\4\1\0\6\4\2\0\17\4\1\u0198\4\4\1\0"+
    "\6\4\2\0\17\4\1\u0199\4\4\1\0\6\4\2\0"+
    "\20\4\1\u019a\3\4\1\0\6\4\2\0\3\4\1\u019b"+
    "\13\4\1\u019c\4\4\1\0\6\4\2\0\24\4\1\0"+
    "\2\4\1\u019d\3\4\2\0\17\4\1\u019e\4\4\1\0"+
    "\6\4\2\0\2\4\1\u019f\21\4\1\0\6\4\2\0"+
    "\3\4\1\u01a0\20\4\1\0\6\4\15\0\1\u01a1\21\0"+
    "\12\4\1\u01a2\11\4\1\0\6\4\2\0\3\4\1\u01a3"+
    "\20\4\1\0\6\4\2\0\3\4\1\u01a4\20\4\1\0"+
    "\6\4\2\0\13\4\1\u01a5\10\4\1\0\6\4\2\0"+
    "\4\4\1\u01a6\17\4\1\0\6\4\2\0\13\4\1\u01a7"+
    "\10\4\1\0\6\4\2\0\20\4\1\u01a8\3\4\1\0"+
    "\6\4\2\0\15\4\1\u01a9\6\4\1\0\6\4\2\0"+
    "\3\4\1\u01aa\13\4\1\u01ab\4\4\1\0\6\4\2\0"+
    "\7\4\1\u01ac\14\4\1\0\6\4\2\0\5\4\1\u01ad"+
    "\1\u01ae\15\4\1\0\6\4\2\0\4\4\1\u01af\17\4"+
    "\1\0\6\4\2\0\13\4\1\u01b0\10\4\1\0\6\4"+
    "\2\0\13\4\1\u01b1\10\4\1\0\6\4\2\0\2\4"+
    "\1\u01b2\21\4\1\0\6\4\2\0\13\4\1\u01b3\10\4"+
    "\1\0\6\4\2\0\17\4\1\u01b4\4\4\1\0\6\4"+
    "\2\0\7\4\1\u01b5\14\4\1\0\6\4\2\0\15\4"+
    "\1\u01b6\6\4\1\0\6\4\2\0\10\4\1\u01b6\13\4"+
    "\1\0\6\4\2\0\13\4\1\u01b7\10\4\1\0\6\4"+
    "\2\0\24\4\1\0\2\4\1\u01a6\3\4\2\0\10\4"+
    "\1\201\13\4\1\0\6\4\2\0\11\4\1\u01b8\12\4"+
    "\1\0\6\4\2\0\7\4\1\u01b9\14\4\1\0\6\4"+
    "\2\0\6\4\1\u01ba\15\4\1\0\6\4\2\0\13\4"+
    "\1\32\10\4\1\0\6\4\2\0\4\4\1\u01ae\17\4"+
    "\1\0\6\4\2\0\3\4\1\u01bb\20\4\1\0\6\4"+
    "\2\0\24\4\1\0\2\4\1\u01bc\3\4\2\0\12\4"+
    "\1\u01bd\4\4\1\u01bd\4\4\1\0\6\4\2\0\11\4"+
    "\1\u01be\12\4\1\0\6\4\2\0\13\4\1\u01bf\10\4"+
    "\1\0\6\4\2\0\13\4\1\u01c0\10\4\1\0\6\4"+
    "\2\0\24\4\1\0\2\4\1\31\3\4\2\0\17\4"+
    "\1\u01c1\4\4\1\0\6\4\2\0\13\4\1\u01ba\10\4"+
    "\1\0\6\4\2\0\10\4\1\u01c2\13\4\1\0\6\4"+
    "\2\0\13\4\1\u01c3\10\4\1\0\6\4\2\0\4\4"+
    "\1\u019d\17\4\1\0\6\4\2\0\11\4\1\u01c4\12\4"+
    "\1\0\6\4\2\0\4\4\1\u01c5\17\4\1\0\6\4"+
    "\2\0\5\4\1\u01c6\16\4\1\0\6\4\2\0\12\4"+
    "\1\u015f\11\4\1\0\6\4\2\0\11\4\1\u01c7\12\4"+
    "\1\0\6\4\2\0\4\4\1\u01c8\17\4\1\0\6\4"+
    "\2\0\4\4\1\u01bc\17\4\1\0\6\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11803];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\306\1\1\0\106\1\1\0\66\1\1\0"+
    "\46\1\1\0\35\1\1\0\24\1\1\11\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[456];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   private Yytoken std(String str) {
  return new Yytoken(str);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexi(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexi(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return std("TEST");
          }
        case 52: break;
        case 28: 
          { return std("STEEL");
          }
        case 53: break;
        case 24: 
          { return std("MODEL");
          }
        case 54: break;
        case 23: 
          { return std("FILM");
          }
        case 55: break;
        case 3: 
          { return std(yytext()) ;
          }
        case 56: break;
        case 4: 
          { /*return std("");*/
          }
        case 57: break;
        case 7: 
          { return std("MARCH");
          }
        case 58: break;
        case 31: 
          { return std("LASER");
          }
        case 59: break;
        case 20: 
          { return std("GAS");
          }
        case 60: break;
        case 42: 
          { return std("SOLUTION");
          }
        case 61: break;
        case 45: 
          { return std("INDUS");
          }
        case 62: break;
        case 9: 
          { return std("INTERNATIONAL");
          }
        case 63: break;
        case 25: 
          { return std("MACHINE");
          }
        case 64: break;
        case 2: 
          { return std(yytext());
          }
        case 65: break;
        case 46: 
          { return std("CONTROL");
          }
        case 66: break;
        case 40: 
          { return std("CRYSTAL");
          }
        case 67: break;
        case 11: 
          { return std("CO");
          }
        case 68: break;
        case 38: 
          { return std("MOD");
          }
        case 69: break;
        case 12: 
          { return std("2");
          }
        case 70: break;
        case 30: 
          { return std("VANDER");
          }
        case 71: break;
        case 35: 
          { return std("NETWORKS");
          }
        case 72: break;
        case 51: 
          { return std("COMPUTER");
          }
        case 73: break;
        case 44: 
          { return std("PROCESS");
          }
        case 74: break;
        case 37: 
          { return std("FILTER");
          }
        case 75: break;
        case 19: 
          { return std("PHYSICS");
          }
        case 76: break;
        case 29: 
          { return std("ADVERT");
          }
        case 77: break;
        case 1: 
          { ;
          }
        case 78: break;
        case 10: 
          { return std("SCIENCE");
          }
        case 79: break;
        case 36: 
          { return std("LTD");
          }
        case 80: break;
        case 39: 
          { return std("CIRCUIT");
          }
        case 81: break;
        case 47: 
          { return std("TECHNIQUE");
          }
        case 82: break;
        case 15: 
          { return std("FEBRUARY");
          }
        case 83: break;
        case 8: 
          { return std("MC");
          }
        case 84: break;
        case 33: 
          { return std("COMMENTARY");
          }
        case 85: break;
        case 16: 
          { return std("LETTERS");
          }
        case 86: break;
        case 41: 
          { return std("CTRL");
          }
        case 87: break;
        case 26: 
          { return std("METALS");
          }
        case 88: break;
        case 43: 
          { return std("ANNOUNCEMENT");
          }
        case 89: break;
        case 32: 
          { return std("DEVICE");
          }
        case 90: break;
        case 17: 
          { return std("USE");
          }
        case 91: break;
        case 21: 
          { return std("MATERIAL");
          }
        case 92: break;
        case 49: 
          { return std("DISTRIBUTE");
          }
        case 93: break;
        case 27: 
          { return std("1");
          }
        case 94: break;
        case 48: 
          { return std("ELECTRIC");
          }
        case 95: break;
        case 13: 
          { return std("VAN");
          }
        case 96: break;
        case 34: 
          { return std("TECHNOLOGY");
          }
        case 97: break;
        case 18: 
          { return std("PROCEEDINGS");
          }
        case 98: break;
        case 14: 
          { return std("ENGINEERING");
          }
        case 99: break;
        case 6: 
          { return std("");
          }
        case 100: break;
        case 50: 
          { return std("APPLICATION");
          }
        case 101: break;
        case 5: 
          { 
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
